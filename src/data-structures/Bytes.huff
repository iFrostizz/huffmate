#define macro CONCAT_MEMORY(mem_ptr1, mem_ptr2) = takes(2) returns(1) {
  // assert that mem_ptr2 >= mem_ptr1 + 0x20

  // TODO: keep free_loc_pos at the end of the stack to return it
  msize msize                       // [free_loc_pos, free_loc_pos]
  <mem_ptr1> mload <mem_ptr2> mload // [len2, len1, free_loc_posi, free_loc_pos]
  add swap1 mstore                  // [free_loc_pos]
  msize                             // [index(j), free_loc_pos]
  <mem_ptr1> dup1 0x20 add          // [index(i), mem_ptr1, index(j), free_loc_pos]
  swap1 mload                       // [len1, index(i), index(j), free_loc_pos]
  0x00                              // [is_sec_loop, len1, index(i), index(j), free_loc_pos]

  loop jump

  loop:                               // [is_sec_loop, len_left, index(i), index(j), free_loc_pos]
    dup2 iszero empty_slot jumpi      // [is_sec_loop, len_left, index(i), index(j), free_loc_pos]

    dup3 mload                        // [word, is_sec_loop, len_left, index(i), index(j), free_loc_pos]
    dup3 0x20 gt iszero               // [is_full_slot, word, is_sec_loop, len_left, index(i), index(j), free_loc_pos]
    full_slot jumpi                   // [word, is_sec_loop, len_left, index(i), index(j), free_loc_pos]

    // else it's not a full slot, we're hitting an end. Then clean memory slot
    swap1 swap2 0x20 sub              // [pad_len, word, is_sec_loop, index(i), index(j), free_loc_pos]
    0x08 mul swap1 dup2               // [shift, word, shift, is_sec_loop, index(i), index(j), free_loc_pos]
    shr                               // [left_padded_word, shift, is_sec_loop, index(i), index(j), free_loc_pos]
    swap1 shl                         // [clean_word, is_sec_loop, index(i), index(j), free_loc_pos]
    dup4 mstore                       // [is_sec_loop, index(i), index(j), free_loc_pos]
  
    // here we check if current loop is for the 2nd array
    iszero bridge jumpi               // [index(i), index(j), free_loc_pos]
    pop pop break jump                // [free_loc_pos]

    empty_slot:                       // [is_sec_loop, len_left, index(i), index(j), free_loc_pos]
      swap2 pop pop                   // [is_sec_loop, index(j), free_loc_pos]
      iszero bridge jumpi             // [index(j), free_loc_pos]  
      pop break jump                  // [free_loc_pos]
  
    bridge:                           // [index(j), free_loc_pos]
      <mem_ptr2> 0x20 add             // [index(i), index(j), free_loc_pos]
      <mem_ptr2> mload                // [len2, index(i), index(j), free_loc_pos]
      0x01                            // [is_sec_loop, len2, index(i), index(j), free_loc_pos]
      loop jump
        
    full_slot:                        // [word, is_sec_loop, len_left, index(i), index(j), free_loc_pos]
      dup5 mstore                     // [is_sec_loop, len_left, index(i), index(j), free_loc_pos]
      swap1 0x20 swap1 sub            // [len_left - 0x20, is_sec_loop, index(i), index(j), free_loc_pos]
      swap2 0x20 add                  // [index(i + 1), is_sec_loop, len_left - 0x20, index(j), free_loc_pos]
      swap3 0x20 add                  // [index(j + 1), is_sec_loop, len_left - 0x20, index(i + 1), free_loc_pos]
      swap3 swap2 swap1               // [is_sec_loop, len_left - 0x20, index(i + 1), index(j + 1), free_loc_pos]
      loop jump
  
  break:                // [free_loc_pos]
    
}

// @param mem_ptr position in memory of the start of the bytes array 
// @param start position of the slice relative to the array
// @param length of the output slice
// @returns position of the output slice in memory
#define macro SLICE_MEMORY(mem_ptr, start, length) = takes(3) returns(1) {
  <mem_ptr> mload              // [len]  
  
  // TODO: assert that length <= len
  // TODO: assert that start < len + mem_ptr
  // Or should we let it free ?
  
  pop
  
  msize <length> msize mstore        // [free_loc_pos]
  msize                  // [free_loc_pos, free_loc]
  swap1
  
  <length>                     // [length, free_loc_pos, free_loc]

  <mem_ptr> 0x20 add           // [arr_start, length, free_loc_pos, free_loc]
  <start> add                  // [counter, length, free_loc_pos, free_loc]

  // 0x20 add                     // [counter, length, free_loc_pos, free_loc]
  loop jump
  
  loop:                        // [counter, length_left, free_loc_pos, free_loc]
    dup1 mload                 // [slice_slice, counter, length_left, free_loc_pos, free_loc]

    // if current is not full slot, then load the last bytes and break
    0x20 dup4 lt               // [is_not_full_slot, slice_slice, counter, length_left, free_loc_pos, free_loc]
    // TODO: cant we just use lt?
    break jumpi
    
    dup5 mstore                // [counter, length_left, free_loc_pos, free_loc]

    0x20 add swap3             // [free_loc, length_left, free_loc_pos, counter + 1]
    0x20 add swap3             // [counter + 1, length_left, free_loc_pos, free_loc + 1]
    swap1 0x20                 // [0x20, length_left, counter + 1, free_loc_pos, free_loc + 1]
    swap1 sub                  // [length_left - 1, counter + 1, free_loc_pos, free_loc + 1]
    swap1                      // [counter + 1, length_left - 1, free_loc_pos, free_loc + 1]

    loop jump
    
  break:                      // [slice_slice, counter, length, free_loc_pos, free_loc]
    // store the remaining length
    dup3 0x20 sub             // [zero_length, slice_slice, counter, length, free_loc_pos, free_loc]
    0x08 mul swap1 dup2       // [shift, slice_slice, shift, counter, length, free_loc_pos, free_loc]
    shr                       // [left_pad_slice, shift, counter, length, free_loc_pos, free_loc]
    swap1 shl                 // [slice_slice, counter, length, free_loc_pos, free_loc]
    dup5 mstore               // [counter, length, free_loc_pos, free_loc]
  
    pop pop swap1 pop         // [free_loc_pos]
}
